'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMedia = exports.getMediaShorthands = exports.getMixin = exports.mediaRules = exports.getNextMedia = exports.getSmallestMedia = exports.mediaTemplate = exports.ruleTemplate = exports.mediaWidthRule = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _templateObject = _taggedTemplateLiteral(['\n      ', '{\n        ', '\n      }\n    '], ['\n      ', '{\n        ', '\n      }\n    ']);

var _styledComponents = require('styled-components');

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

// Breakpoint


// Flow-types
var mediaWidthRule = exports.mediaWidthRule = function mediaWidthRule(rule) {
  return ({ up: 'min', down: 'max' }[rule] || 'min') + '-width';
};

var ruleTemplate = exports.ruleTemplate = function ruleTemplate(rule, width) {
  return '(' + rule + ': ' + width + 'px)';
};
var mediaTemplate = exports.mediaTemplate = function mediaTemplate(rules) {
  return '@media only screen and ' + rules;
};

var getSmallestMedia = exports.getSmallestMedia = function getSmallestMedia(breakpoints) {
  var keys = Object.keys(breakpoints);

  return Number(keys.reduce(function (acc, key) {
    if (acc) {
      return acc > breakpoints[key] ? breakpoints[key] : acc;
    }
    return breakpoints[key];
  }, undefined));
};

var getNextMedia = exports.getNextMedia = function getNextMedia(breakpoints, width) {
  var keys = Object.keys(breakpoints);

  var nextBreakpoint = Number(keys.reduce(function (acc, key) {
    var current = breakpoints[key];
    if (acc && width - current <= 0) {
      return width - acc > Math.abs(width - current) || width - acc === 0 ? current : acc;
    }
    return getSmallestMedia(breakpoints);
  }, undefined));

  if (nextBreakpoint === width) {
    throw new Error('The breakpoint of value ' + nextBreakpoint + ' is the heighst there is, did you mean to use "[media].up"?');
  }
  return nextBreakpoint;
};

var mediaRules = exports.mediaRules = function mediaRules(breakpoints, widthKey, rule, boundKey) {
  var width = breakpoints[widthKey];
  var bound = breakpoints[boundKey];
  var baseWidthRule = mediaWidthRule(rule);
  var boudWidthRule = void 0;

  var baseRule = ruleTemplate(baseWidthRule, width);
  var boundRule = void 0;

  if (bound && width) {
    // Get correct rule based on width relative to bound
    baseWidthRule = mediaWidthRule(bound <= width ? 'down' : 'up');
    boudWidthRule = mediaWidthRule(bound <= width ? 'up' : 'down');

    baseRule = ruleTemplate(mediaWidthRule(bound <= width ? 'down' : 'up'), width);
    boundRule = ruleTemplate(boudWidthRule, bound);
    return [].concat([baseRule], bound ? [boundRule] : []).join(' and ');
  }

  if (!bound && rule === 'only') {
    // Get correct rule based on width relative to bound
    boudWidthRule = mediaWidthRule(bound <= width ? 'up' : 'down');
    boundRule = ruleTemplate(boudWidthRule, getNextMedia(breakpoints, width));
  }

  return [].concat([baseRule], boundRule ? [boundRule] : []).join(' and ');
};

var getMixin = exports.getMixin = function getMixin(breakpoints, key) {
  var rule = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'up';
  return function (bound) {
    return function () {
      return (0, _styledComponents.css)(_templateObject, mediaTemplate(mediaRules(breakpoints, key, rule, bound)), _styledComponents.css.apply(undefined, arguments));
    };
  };
};

var getMediaShorthands = exports.getMediaShorthands = function getMediaShorthands(breakpoints, rule) {
  return Object.keys(breakpoints).reduce(function (acc, key) {
    return _extends({}, acc, _defineProperty({}, key, getMixin(breakpoints, key, rule)()));
  }, {});
};

var getMedia = exports.getMedia = function getMedia(breakpoints) {
  var mediasUp = getMediaShorthands(breakpoints, 'up');
  var list = Object.keys(breakpoints);

  return _extends({}, mediasUp, {
    up: function up(widthKey) {
      return getMixin(breakpoints, widthKey, 'up')();
    },
    down: function down(widthKey) {
      return getMixin(breakpoints, widthKey, 'down')();
    },
    only: function only(widthKey, boundKey) {
      return getMixin(breakpoints, widthKey, 'only')(boundKey);
    },
    list: list
  });
};

exports.default = getMedia;
//# sourceMappingURL=index.js.map